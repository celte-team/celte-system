// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: systems_structs.proto
// Protobuf C++ Version: 5.29.1

#ifndef systems_5fstructs_2eproto_2epb_2eh
#define systems_5fstructs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_systems_5fstructs_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_systems_5fstructs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_systems_5fstructs_2eproto;
namespace celte {
namespace req {
class BinaryDataPacket;
struct BinaryDataPacketDefaultTypeInternal;
extern BinaryDataPacketDefaultTypeInternal _BinaryDataPacket_default_instance_;
class ClockTick;
struct ClockTickDefaultTypeInternal;
extern ClockTickDefaultTypeInternal _ClockTick_default_instance_;
class RPRequest;
struct RPRequestDefaultTypeInternal;
extern RPRequestDefaultTypeInternal _RPRequest_default_instance_;
class ReplicationDataPacket;
struct ReplicationDataPacketDefaultTypeInternal;
extern ReplicationDataPacketDefaultTypeInternal _ReplicationDataPacket_default_instance_;
class ReplicationDataPacket_DataEntry_DoNotUse;
struct ReplicationDataPacket_DataEntry_DoNotUseDefaultTypeInternal;
extern ReplicationDataPacket_DataEntry_DoNotUseDefaultTypeInternal _ReplicationDataPacket_DataEntry_DoNotUse_default_instance_;
class SpawnPositionRequest;
struct SpawnPositionRequestDefaultTypeInternal;
extern SpawnPositionRequestDefaultTypeInternal _SpawnPositionRequest_default_instance_;
}  // namespace req
}  // namespace celte
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace celte {
namespace req {

// ===================================================================


// -------------------------------------------------------------------

class SpawnPositionRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:celte.req.SpawnPositionRequest) */ {
 public:
  inline SpawnPositionRequest() : SpawnPositionRequest(nullptr) {}
  ~SpawnPositionRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SpawnPositionRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SpawnPositionRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SpawnPositionRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SpawnPositionRequest(const SpawnPositionRequest& from) : SpawnPositionRequest(nullptr, from) {}
  inline SpawnPositionRequest(SpawnPositionRequest&& from) noexcept
      : SpawnPositionRequest(nullptr, std::move(from)) {}
  inline SpawnPositionRequest& operator=(const SpawnPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnPositionRequest& operator=(SpawnPositionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpawnPositionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpawnPositionRequest* internal_default_instance() {
    return reinterpret_cast<const SpawnPositionRequest*>(
        &_SpawnPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SpawnPositionRequest& a, SpawnPositionRequest& b) { a.Swap(&b); }
  inline void Swap(SpawnPositionRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpawnPositionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpawnPositionRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SpawnPositionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SpawnPositionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SpawnPositionRequest& from) { SpawnPositionRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SpawnPositionRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "celte.req.SpawnPositionRequest"; }

 protected:
  explicit SpawnPositionRequest(::google::protobuf::Arena* arena);
  SpawnPositionRequest(::google::protobuf::Arena* arena, const SpawnPositionRequest& from);
  SpawnPositionRequest(::google::protobuf::Arena* arena, SpawnPositionRequest&& from) noexcept
      : SpawnPositionRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientIdFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // string clientId = 1;
  void clear_clientid() ;
  const std::string& clientid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_clientid(Arg_&& arg, Args_... args);
  std::string* mutable_clientid();
  PROTOBUF_NODISCARD std::string* release_clientid();
  void set_allocated_clientid(std::string* value);

  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(
      const std::string& value);
  std::string* _internal_mutable_clientid();

  public:
  // string payload = 2;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // @@protoc_insertion_point(class_scope:celte.req.SpawnPositionRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SpawnPositionRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr clientid_;
    ::google::protobuf::internal::ArenaStringPtr payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_systems_5fstructs_2eproto;
};
// -------------------------------------------------------------------

class ReplicationDataPacket_DataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ReplicationDataPacket_DataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReplicationDataPacket_DataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ReplicationDataPacket_DataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ReplicationDataPacket_DataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ReplicationDataPacket_DataEntry_DoNotUse*>(
        &_ReplicationDataPacket_DataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_systems_5fstructs_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class RPRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:celte.req.RPRequest) */ {
 public:
  inline RPRequest() : RPRequest(nullptr) {}
  ~RPRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RPRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RPRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RPRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RPRequest(const RPRequest& from) : RPRequest(nullptr, from) {}
  inline RPRequest(RPRequest&& from) noexcept
      : RPRequest(nullptr, std::move(from)) {}
  inline RPRequest& operator=(const RPRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPRequest& operator=(RPRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPRequest* internal_default_instance() {
    return reinterpret_cast<const RPRequest*>(
        &_RPRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(RPRequest& a, RPRequest& b) { a.Swap(&b); }
  inline void Swap(RPRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RPRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RPRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RPRequest& from) { RPRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RPRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "celte.req.RPRequest"; }

 protected:
  explicit RPRequest(::google::protobuf::Arena* arena);
  RPRequest(::google::protobuf::Arena* arena, const RPRequest& from);
  RPRequest(::google::protobuf::Arena* arena, RPRequest&& from) noexcept
      : RPRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kRespondsToFieldNumber = 2,
    kResponseTopicFieldNumber = 3,
    kRpcIdFieldNumber = 4,
    kArgsFieldNumber = 5,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string responds_to = 2;
  void clear_responds_to() ;
  const std::string& responds_to() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_responds_to(Arg_&& arg, Args_... args);
  std::string* mutable_responds_to();
  PROTOBUF_NODISCARD std::string* release_responds_to();
  void set_allocated_responds_to(std::string* value);

  private:
  const std::string& _internal_responds_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_responds_to(
      const std::string& value);
  std::string* _internal_mutable_responds_to();

  public:
  // string response_topic = 3;
  void clear_response_topic() ;
  const std::string& response_topic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_response_topic(Arg_&& arg, Args_... args);
  std::string* mutable_response_topic();
  PROTOBUF_NODISCARD std::string* release_response_topic();
  void set_allocated_response_topic(std::string* value);

  private:
  const std::string& _internal_response_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response_topic(
      const std::string& value);
  std::string* _internal_mutable_response_topic();

  public:
  // string rpc_id = 4;
  void clear_rpc_id() ;
  const std::string& rpc_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpc_id(Arg_&& arg, Args_... args);
  std::string* mutable_rpc_id();
  PROTOBUF_NODISCARD std::string* release_rpc_id();
  void set_allocated_rpc_id(std::string* value);

  private:
  const std::string& _internal_rpc_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpc_id(
      const std::string& value);
  std::string* _internal_mutable_rpc_id();

  public:
  // string args = 5;
  void clear_args() ;
  const std::string& args() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_args(Arg_&& arg, Args_... args);
  std::string* mutable_args();
  PROTOBUF_NODISCARD std::string* release_args();
  void set_allocated_args(std::string* value);

  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(
      const std::string& value);
  std::string* _internal_mutable_args();

  public:
  // @@protoc_insertion_point(class_scope:celte.req.RPRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      67, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RPRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr responds_to_;
    ::google::protobuf::internal::ArenaStringPtr response_topic_;
    ::google::protobuf::internal::ArenaStringPtr rpc_id_;
    ::google::protobuf::internal::ArenaStringPtr args_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_systems_5fstructs_2eproto;
};
// -------------------------------------------------------------------

class ClockTick final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:celte.req.ClockTick) */ {
 public:
  inline ClockTick() : ClockTick(nullptr) {}
  ~ClockTick() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClockTick* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClockTick));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClockTick(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClockTick(const ClockTick& from) : ClockTick(nullptr, from) {}
  inline ClockTick(ClockTick&& from) noexcept
      : ClockTick(nullptr, std::move(from)) {}
  inline ClockTick& operator=(const ClockTick& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClockTick& operator=(ClockTick&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClockTick& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClockTick* internal_default_instance() {
    return reinterpret_cast<const ClockTick*>(
        &_ClockTick_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ClockTick& a, ClockTick& b) { a.Swap(&b); }
  inline void Swap(ClockTick* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClockTick* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClockTick* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClockTick>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClockTick& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClockTick& from) { ClockTick::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClockTick* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "celte.req.ClockTick"; }

 protected:
  explicit ClockTick(::google::protobuf::Arena* arena);
  ClockTick(::google::protobuf::Arena* arena, const ClockTick& from);
  ClockTick(::google::protobuf::Arena* arena, ClockTick&& from) noexcept
      : ClockTick(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUnifiedTimeMsFieldNumber = 2,
  };
  // int64 unified_time_ms = 2;
  void clear_unified_time_ms() ;
  ::int64_t unified_time_ms() const;
  void set_unified_time_ms(::int64_t value);

  private:
  ::int64_t _internal_unified_time_ms() const;
  void _internal_set_unified_time_ms(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:celte.req.ClockTick)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClockTick& from_msg);
    ::int64_t unified_time_ms_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_systems_5fstructs_2eproto;
};
// -------------------------------------------------------------------

class BinaryDataPacket final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:celte.req.BinaryDataPacket) */ {
 public:
  inline BinaryDataPacket() : BinaryDataPacket(nullptr) {}
  ~BinaryDataPacket() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BinaryDataPacket* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BinaryDataPacket));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BinaryDataPacket(
      ::google::protobuf::internal::ConstantInitialized);

  inline BinaryDataPacket(const BinaryDataPacket& from) : BinaryDataPacket(nullptr, from) {}
  inline BinaryDataPacket(BinaryDataPacket&& from) noexcept
      : BinaryDataPacket(nullptr, std::move(from)) {}
  inline BinaryDataPacket& operator=(const BinaryDataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryDataPacket& operator=(BinaryDataPacket&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryDataPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryDataPacket* internal_default_instance() {
    return reinterpret_cast<const BinaryDataPacket*>(
        &_BinaryDataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(BinaryDataPacket& a, BinaryDataPacket& b) { a.Swap(&b); }
  inline void Swap(BinaryDataPacket* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryDataPacket* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryDataPacket* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BinaryDataPacket>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BinaryDataPacket& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BinaryDataPacket& from) { BinaryDataPacket::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BinaryDataPacket* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "celte.req.BinaryDataPacket"; }

 protected:
  explicit BinaryDataPacket(::google::protobuf::Arena* arena);
  BinaryDataPacket(::google::protobuf::Arena* arena, const BinaryDataPacket& from);
  BinaryDataPacket(::google::protobuf::Arena* arena, BinaryDataPacket&& from) noexcept
      : BinaryDataPacket(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBinaryDataFieldNumber = 1,
    kPeerUuidFieldNumber = 2,
  };
  // string binaryData = 1;
  void clear_binarydata() ;
  const std::string& binarydata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_binarydata(Arg_&& arg, Args_... args);
  std::string* mutable_binarydata();
  PROTOBUF_NODISCARD std::string* release_binarydata();
  void set_allocated_binarydata(std::string* value);

  private:
  const std::string& _internal_binarydata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_binarydata(
      const std::string& value);
  std::string* _internal_mutable_binarydata();

  public:
  // string peerUuid = 2;
  void clear_peeruuid() ;
  const std::string& peeruuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_peeruuid(Arg_&& arg, Args_... args);
  std::string* mutable_peeruuid();
  PROTOBUF_NODISCARD std::string* release_peeruuid();
  void set_allocated_peeruuid(std::string* value);

  private:
  const std::string& _internal_peeruuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peeruuid(
      const std::string& value);
  std::string* _internal_mutable_peeruuid();

  public:
  // @@protoc_insertion_point(class_scope:celte.req.BinaryDataPacket)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BinaryDataPacket& from_msg);
    ::google::protobuf::internal::ArenaStringPtr binarydata_;
    ::google::protobuf::internal::ArenaStringPtr peeruuid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_systems_5fstructs_2eproto;
};
// -------------------------------------------------------------------

class ReplicationDataPacket final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:celte.req.ReplicationDataPacket) */ {
 public:
  inline ReplicationDataPacket() : ReplicationDataPacket(nullptr) {}
  ~ReplicationDataPacket() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReplicationDataPacket* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReplicationDataPacket));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReplicationDataPacket(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReplicationDataPacket(const ReplicationDataPacket& from) : ReplicationDataPacket(nullptr, from) {}
  inline ReplicationDataPacket(ReplicationDataPacket&& from) noexcept
      : ReplicationDataPacket(nullptr, std::move(from)) {}
  inline ReplicationDataPacket& operator=(const ReplicationDataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicationDataPacket& operator=(ReplicationDataPacket&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicationDataPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicationDataPacket* internal_default_instance() {
    return reinterpret_cast<const ReplicationDataPacket*>(
        &_ReplicationDataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ReplicationDataPacket& a, ReplicationDataPacket& b) { a.Swap(&b); }
  inline void Swap(ReplicationDataPacket* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicationDataPacket* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicationDataPacket* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReplicationDataPacket>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReplicationDataPacket& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReplicationDataPacket& from) { ReplicationDataPacket::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReplicationDataPacket* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "celte.req.ReplicationDataPacket"; }

 protected:
  explicit ReplicationDataPacket(::google::protobuf::Arena* arena);
  ReplicationDataPacket(::google::protobuf::Arena* arena, const ReplicationDataPacket& from);
  ReplicationDataPacket(::google::protobuf::Arena* arena, ReplicationDataPacket&& from) noexcept
      : ReplicationDataPacket(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
    kActiveFieldNumber = 2,
  };
  // map<string, string> data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  const ::google::protobuf::Map<std::string, std::string>& data() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_data();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_data() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_data();

  public:
  // bool active = 2;
  void clear_active() ;
  bool active() const;
  void set_active(bool value);

  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:celte.req.ReplicationDataPacket)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReplicationDataPacket& from_msg);
    ::google::protobuf::internal::MapField<ReplicationDataPacket_DataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        data_;
    bool active_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_systems_5fstructs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BinaryDataPacket

// string binaryData = 1;
inline void BinaryDataPacket::clear_binarydata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.binarydata_.ClearToEmpty();
}
inline const std::string& BinaryDataPacket::binarydata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:celte.req.BinaryDataPacket.binaryData)
  return _internal_binarydata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BinaryDataPacket::set_binarydata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.binarydata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:celte.req.BinaryDataPacket.binaryData)
}
inline std::string* BinaryDataPacket::mutable_binarydata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_binarydata();
  // @@protoc_insertion_point(field_mutable:celte.req.BinaryDataPacket.binaryData)
  return _s;
}
inline const std::string& BinaryDataPacket::_internal_binarydata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.binarydata_.Get();
}
inline void BinaryDataPacket::_internal_set_binarydata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.binarydata_.Set(value, GetArena());
}
inline std::string* BinaryDataPacket::_internal_mutable_binarydata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.binarydata_.Mutable( GetArena());
}
inline std::string* BinaryDataPacket::release_binarydata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:celte.req.BinaryDataPacket.binaryData)
  return _impl_.binarydata_.Release();
}
inline void BinaryDataPacket::set_allocated_binarydata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.binarydata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.binarydata_.IsDefault()) {
    _impl_.binarydata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:celte.req.BinaryDataPacket.binaryData)
}

// string peerUuid = 2;
inline void BinaryDataPacket::clear_peeruuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.peeruuid_.ClearToEmpty();
}
inline const std::string& BinaryDataPacket::peeruuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:celte.req.BinaryDataPacket.peerUuid)
  return _internal_peeruuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BinaryDataPacket::set_peeruuid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.peeruuid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:celte.req.BinaryDataPacket.peerUuid)
}
inline std::string* BinaryDataPacket::mutable_peeruuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_peeruuid();
  // @@protoc_insertion_point(field_mutable:celte.req.BinaryDataPacket.peerUuid)
  return _s;
}
inline const std::string& BinaryDataPacket::_internal_peeruuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.peeruuid_.Get();
}
inline void BinaryDataPacket::_internal_set_peeruuid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.peeruuid_.Set(value, GetArena());
}
inline std::string* BinaryDataPacket::_internal_mutable_peeruuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.peeruuid_.Mutable( GetArena());
}
inline std::string* BinaryDataPacket::release_peeruuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:celte.req.BinaryDataPacket.peerUuid)
  return _impl_.peeruuid_.Release();
}
inline void BinaryDataPacket::set_allocated_peeruuid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.peeruuid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.peeruuid_.IsDefault()) {
    _impl_.peeruuid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:celte.req.BinaryDataPacket.peerUuid)
}

// -------------------------------------------------------------------

// SpawnPositionRequest

// string clientId = 1;
inline void SpawnPositionRequest::clear_clientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.ClearToEmpty();
}
inline const std::string& SpawnPositionRequest::clientid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:celte.req.SpawnPositionRequest.clientId)
  return _internal_clientid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpawnPositionRequest::set_clientid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:celte.req.SpawnPositionRequest.clientId)
}
inline std::string* SpawnPositionRequest::mutable_clientid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_clientid();
  // @@protoc_insertion_point(field_mutable:celte.req.SpawnPositionRequest.clientId)
  return _s;
}
inline const std::string& SpawnPositionRequest::_internal_clientid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.clientid_.Get();
}
inline void SpawnPositionRequest::_internal_set_clientid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.Set(value, GetArena());
}
inline std::string* SpawnPositionRequest::_internal_mutable_clientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.clientid_.Mutable( GetArena());
}
inline std::string* SpawnPositionRequest::release_clientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:celte.req.SpawnPositionRequest.clientId)
  return _impl_.clientid_.Release();
}
inline void SpawnPositionRequest::set_allocated_clientid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.clientid_.IsDefault()) {
    _impl_.clientid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:celte.req.SpawnPositionRequest.clientId)
}

// string payload = 2;
inline void SpawnPositionRequest::clear_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& SpawnPositionRequest::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:celte.req.SpawnPositionRequest.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpawnPositionRequest::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:celte.req.SpawnPositionRequest.payload)
}
inline std::string* SpawnPositionRequest::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:celte.req.SpawnPositionRequest.payload)
  return _s;
}
inline const std::string& SpawnPositionRequest::_internal_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_.Get();
}
inline void SpawnPositionRequest::_internal_set_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* SpawnPositionRequest::_internal_mutable_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* SpawnPositionRequest::release_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:celte.req.SpawnPositionRequest.payload)
  return _impl_.payload_.Release();
}
inline void SpawnPositionRequest::set_allocated_payload(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:celte.req.SpawnPositionRequest.payload)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ReplicationDataPacket

// map<string, string> data = 1;
inline int ReplicationDataPacket::_internal_data_size() const {
  return _internal_data().size();
}
inline int ReplicationDataPacket::data_size() const {
  return _internal_data_size();
}
inline void ReplicationDataPacket::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ReplicationDataPacket::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ReplicationDataPacket::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:celte.req.ReplicationDataPacket.data)
  return _internal_data();
}
inline ::google::protobuf::Map<std::string, std::string>* ReplicationDataPacket::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ReplicationDataPacket::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:celte.req.ReplicationDataPacket.data)
  return _internal_mutable_data();
}

// bool active = 2;
inline void ReplicationDataPacket::clear_active() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = false;
}
inline bool ReplicationDataPacket::active() const {
  // @@protoc_insertion_point(field_get:celte.req.ReplicationDataPacket.active)
  return _internal_active();
}
inline void ReplicationDataPacket::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:celte.req.ReplicationDataPacket.active)
}
inline bool ReplicationDataPacket::_internal_active() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.active_;
}
inline void ReplicationDataPacket::_internal_set_active(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = value;
}

// -------------------------------------------------------------------

// RPRequest

// string name = 1;
inline void RPRequest::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RPRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:celte.req.RPRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:celte.req.RPRequest.name)
}
inline std::string* RPRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:celte.req.RPRequest.name)
  return _s;
}
inline const std::string& RPRequest::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void RPRequest::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* RPRequest::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* RPRequest::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:celte.req.RPRequest.name)
  return _impl_.name_.Release();
}
inline void RPRequest::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:celte.req.RPRequest.name)
}

// string responds_to = 2;
inline void RPRequest::clear_responds_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.responds_to_.ClearToEmpty();
}
inline const std::string& RPRequest::responds_to() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:celte.req.RPRequest.responds_to)
  return _internal_responds_to();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPRequest::set_responds_to(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.responds_to_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:celte.req.RPRequest.responds_to)
}
inline std::string* RPRequest::mutable_responds_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_responds_to();
  // @@protoc_insertion_point(field_mutable:celte.req.RPRequest.responds_to)
  return _s;
}
inline const std::string& RPRequest::_internal_responds_to() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.responds_to_.Get();
}
inline void RPRequest::_internal_set_responds_to(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.responds_to_.Set(value, GetArena());
}
inline std::string* RPRequest::_internal_mutable_responds_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.responds_to_.Mutable( GetArena());
}
inline std::string* RPRequest::release_responds_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:celte.req.RPRequest.responds_to)
  return _impl_.responds_to_.Release();
}
inline void RPRequest::set_allocated_responds_to(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.responds_to_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.responds_to_.IsDefault()) {
    _impl_.responds_to_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:celte.req.RPRequest.responds_to)
}

// string response_topic = 3;
inline void RPRequest::clear_response_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_topic_.ClearToEmpty();
}
inline const std::string& RPRequest::response_topic() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:celte.req.RPRequest.response_topic)
  return _internal_response_topic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPRequest::set_response_topic(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_topic_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:celte.req.RPRequest.response_topic)
}
inline std::string* RPRequest::mutable_response_topic() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_response_topic();
  // @@protoc_insertion_point(field_mutable:celte.req.RPRequest.response_topic)
  return _s;
}
inline const std::string& RPRequest::_internal_response_topic() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.response_topic_.Get();
}
inline void RPRequest::_internal_set_response_topic(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_topic_.Set(value, GetArena());
}
inline std::string* RPRequest::_internal_mutable_response_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.response_topic_.Mutable( GetArena());
}
inline std::string* RPRequest::release_response_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:celte.req.RPRequest.response_topic)
  return _impl_.response_topic_.Release();
}
inline void RPRequest::set_allocated_response_topic(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_topic_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.response_topic_.IsDefault()) {
    _impl_.response_topic_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:celte.req.RPRequest.response_topic)
}

// string rpc_id = 4;
inline void RPRequest::clear_rpc_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpc_id_.ClearToEmpty();
}
inline const std::string& RPRequest::rpc_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:celte.req.RPRequest.rpc_id)
  return _internal_rpc_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPRequest::set_rpc_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpc_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:celte.req.RPRequest.rpc_id)
}
inline std::string* RPRequest::mutable_rpc_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpc_id();
  // @@protoc_insertion_point(field_mutable:celte.req.RPRequest.rpc_id)
  return _s;
}
inline const std::string& RPRequest::_internal_rpc_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rpc_id_.Get();
}
inline void RPRequest::_internal_set_rpc_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpc_id_.Set(value, GetArena());
}
inline std::string* RPRequest::_internal_mutable_rpc_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rpc_id_.Mutable( GetArena());
}
inline std::string* RPRequest::release_rpc_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:celte.req.RPRequest.rpc_id)
  return _impl_.rpc_id_.Release();
}
inline void RPRequest::set_allocated_rpc_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpc_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rpc_id_.IsDefault()) {
    _impl_.rpc_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:celte.req.RPRequest.rpc_id)
}

// string args = 5;
inline void RPRequest::clear_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.ClearToEmpty();
}
inline const std::string& RPRequest::args() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:celte.req.RPRequest.args)
  return _internal_args();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPRequest::set_args(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:celte.req.RPRequest.args)
}
inline std::string* RPRequest::mutable_args() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_args();
  // @@protoc_insertion_point(field_mutable:celte.req.RPRequest.args)
  return _s;
}
inline const std::string& RPRequest::_internal_args() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.args_.Get();
}
inline void RPRequest::_internal_set_args(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.Set(value, GetArena());
}
inline std::string* RPRequest::_internal_mutable_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.args_.Mutable( GetArena());
}
inline std::string* RPRequest::release_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:celte.req.RPRequest.args)
  return _impl_.args_.Release();
}
inline void RPRequest::set_allocated_args(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.args_.IsDefault()) {
    _impl_.args_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:celte.req.RPRequest.args)
}

// -------------------------------------------------------------------

// ClockTick

// int64 unified_time_ms = 2;
inline void ClockTick::clear_unified_time_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unified_time_ms_ = ::int64_t{0};
}
inline ::int64_t ClockTick::unified_time_ms() const {
  // @@protoc_insertion_point(field_get:celte.req.ClockTick.unified_time_ms)
  return _internal_unified_time_ms();
}
inline void ClockTick::set_unified_time_ms(::int64_t value) {
  _internal_set_unified_time_ms(value);
  // @@protoc_insertion_point(field_set:celte.req.ClockTick.unified_time_ms)
}
inline ::int64_t ClockTick::_internal_unified_time_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unified_time_ms_;
}
inline void ClockTick::_internal_set_unified_time_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unified_time_ms_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace req
}  // namespace celte


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // systems_5fstructs_2eproto_2epb_2eh
