services:
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: "ERROR"
      KAFKA_LOG4J_LOGGERS: "kafka.controller=ERROR,kafka.producer.async.DefaultEventHandler=ERROR,state.change.logger=ERROR"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_LOG_RETENTION_MS: 60000
    depends_on:
      - zoo1

  kafka2:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_ROOT_LOGLEVEL: "ERROR"
      KAFKA_LOG4J_LOGGERS: "kafka.controller=ERROR,kafka.producer.async.DefaultEventHandler=ERROR,state.change.logger=ERROR"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_LOG_RETENTION_MS: 60000
    depends_on:
      - zoo1

  kafka3:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_ROOT_LOGLEVEL: "ERROR"
      KAFKA_LOG4J_LOGGERS: "kafka.controller=ERROR,kafka.producer.async.DefaultEventHandler=ERROR,state.change.logger=ERROR"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_LOG_RETENTION_MS: 60000
    depends_on:
      - zoo1

  clock:
    build:
      context: ../
      dockerfile: ClockServer/Dockerfile
    container_name: clock-celte
    environment:
      - CELTE_CLUSTER_HOST=${DOCKER_HOST_IP}
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - haproxy

  haproxy:
    image: haproxy:2.9
    container_name: haproxy
    ports:
      - "80:80"
      - "8405:8405"
      - "443:443"
    ulimits:
      nofile:
        soft: 10000
        hard: 30000
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
      - ./certs/haproxy:/etc/haproxy/certs
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    restart: always


########################################################################################
# The following services are for metrics and monitoring.
########################################################################################

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka1:19092,kafka2:19093,kafka3:19094"
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - haproxy

# in case we loose it: 7589 is the id of the grafana dashboard template for kafka-exporter
# 11962 is good too
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    ports:
      - 9308:9308
    command:
      - --kafka.server=kafka1:19092
      - --kafka.server=kafka2:19093
      - --kafka.server=kafka3:19094
      - --zookeeper.server=zoo1:2181
      - --use.consumelag.zookeeper
      - --log.level=debug
      - --topic.filter=.*
      - --group.filter=.*
      - --web.telemetry-path=/metrics
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    restart: always

  prometheus:
      image: prom/prometheus
      ports:
        - 9090:9090
      volumes:
        - ./prometheus.yml:/etc/prometheus/prometheus.yml
      command:
        - --config.file=/etc/prometheus/prometheus.yml
        - --web.enable-lifecycle
        - --web.enable-admin-api

  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=eliotisthebest
    volumes:
      - ./grafana:/var/lib/grafana

  console:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: console
    ports:
      - 8080:8080
    environment:
      - KAFKA_BROKERS=kafka1:19092,kafka2:19093,kafka3:19094
